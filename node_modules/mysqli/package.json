{
  "_args": [
    [
      {
        "raw": "mysqli",
        "scope": null,
        "escapedName": "mysqli",
        "name": "mysqli",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Jae\\Desktop\\Slacking Food Blog"
    ]
  ],
  "_from": "mysqli@latest",
  "_id": "mysqli@2.0.1",
  "_inCache": true,
  "_location": "/mysqli",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mysqli-2.0.1.tgz_1495430832715_0.8571295388974249"
  },
  "_npmUser": {
    "name": "yutent",
    "email": "yutent@doui.cc"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mysqli",
    "scope": null,
    "escapedName": "mysqli",
    "name": "mysqli",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mysqli/-/mysqli-2.0.1.tgz",
  "_shasum": "d763fa51ae46ce51ef93cb6ebfb31000e7c857bd",
  "_shrinkwrap": null,
  "_spec": "mysqli",
  "_where": "C:\\Users\\Jae\\Desktop\\Slacking Food Blog",
  "author": {
    "name": "yutent"
  },
  "bugs": {
    "url": "https://github.com/yutent/mysqli/issues"
  },
  "dependencies": {
    "es.shim": "^0.0.2",
    "mysql": "^2.13.0"
  },
  "description": "MySQL tool",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d763fa51ae46ce51ef93cb6ebfb31000e7c857bd",
    "tarball": "https://registry.npmjs.org/mysqli/-/mysqli-2.0.1.tgz"
  },
  "gitHead": "572f7580eb965c9098ed20cfb25d4b4a1cbc665b",
  "homepage": "https://github.com/yutent/mysqli#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "yutent",
      "email": "yutent@doui.cc"
    }
  ],
  "name": "mysqli",
  "optionalDependencies": {},
  "readme": "![module info](https://nodei.co/npm/mysqli.png?downloads=true&downloadRank=true&stars=true)\n# mysqli\n> 本模块基于node-mysql模块二次封装，对基础的增删改查，主从库等按js的特点进行了简化，并对SQL注入进行安全过滤，让没有SQL基础的人，也能顺利使用;\n> 当然，一些复杂的查询，以及事务等，这些不在我的服务之内，而且会用到这些功能的童鞋，本身也有一定的SQL基础了; 所以，这类童鞋，请自行使用各自习惯的SQL模块，或手写实现。\n\n\n\n## 使用npm安装\n\n```bash\nnpm install mysqli\n```\n\n\n## 实例化\n> 实例化可以传2种格式的配置，1是json对象，2是数组。\n> 只有一个数据库时，默认是主库; 多于1个数据库服务时，自动以第1个为主库，其他的从库，故实例化时，`注意顺序`。\n\n\n```javascript\n    \nlet Mysqli = require('mysqli')\n\n//传入json\nlet conn = new Mysqli({\n        host: '', // IP/域名\n        post: 3306, //端口， 默认 3306\n        user: '', //用户名\n        passwd: '', //密码\n        charset: '', // 数据库编码，默认 utf8 【可选】\n        db: '', // 可指定数据库，也可以不指定 【可选】\n    })\n\n// 传入数组\nlet conn = new Mysqli([\n        {\n            host: 'host1', // IP/域名\n            post: 3306, //端口， 默认 3306\n            user: '', //用户名\n            passwd: '', //密码\n            charset: '', // 数据库编码，默认 utf8 【可选】\n            db: '', // 可指定数据库，也可以不指定 【可选】\n        },\n        {\n            host: 'host2', // IP/域名\n            post: 3306, //端口， 默认 3306\n            user: '', //用户名\n            passwd: '', //密码\n            charset: '', // 数据库编码，默认 utf8 【可选】\n            db: '', // 可指定数据库，也可以不指定 【可选】\n        },\n    ])\n\n```\n\n\n## API方法\n\n\n### 1. escape(val)\n> 这是`node-mysql`的内部方法，用于进行SQL安全过滤，这里只是做了搬运工，把它暴露出来给外部调用而已。\n\n\n### 2. listDB()\n> 顾名思义，该方法即用于列举当前账号权限范围内的所有的数据库名称，返回值是一个数组;\n> \n> **注：**`该方法配置await指令可得到纯粹的数据，否则返回的是一个Promise对象`\n\n```javascript\n\nasync function(){\n    let db = await conn.listDB()\n    console.log(db)\n}\n\n// 不使用await指令时，返回的是Promise对象\nconn.listDB().then(db => {\n    console.log(db)\n})\n\n\n```\n\n\n### 3. useDB(db[, slave])\n- db `<String>`\n- slave `<Boolean>` 可选\n\n> 该方法用于切换数据库，仅限于同一台机器上的数据库;  在配置中没有指定数据库的情况下，必须先调用该方法才可以进行后续的增删改查等操作。\n> \n> `db`即为要切换的数据库名; `slave`为是否从库查询，默认主库。\n\n```javascript\n\nasync function(){\n\n    let docs = await conn.useDB('xx').query(`select * from users limit 10`);\n    console.log(docs);\n\n}\n\n// 不使用await指令时，返回的是Promise对象\nconn.useDB('xx')\n    .query(`select * from users limit 10`)\n    .then(docs => {\n        console.log(docs)\n    })\n\n\n```\n\n\n\n### 4. query(sql[, slave])\n- sql `<String>`\n- slave `<Boolean>` 可选\n\n> 该方法用于当内置的方法满足不了需求时，可以自行编写`sql语句`执行; 但要注意防止`sql注入`，因为该方法是最基础的方法，模块不对传入的`sql语句`进行任何的安全过滤。\n> \n> `sql`即为要执行的sql语句; `slave`为是否从库查询，默认主库。\n\n```javascript\n\nasync function(){\n\n    let docs = await conn.query(`select * from users limit 10`);\n    console.log(docs);\n\n}\n\n// 不使用await指令时，返回的是Promise对象\nconn.query(`select * from users limit 10`)\n    .then(docs => {\n        console.log(docs)\n    })\n\n```\n\n\n\n### 5. find(conf)\n- conf `<Object>`\n\n> 该方法用于查询多条数据。无论结果是多少条，返回的都是`数组格式`; 详细请看下面代码示例：\n\n```javascript\n\nconn.find({\n    table: '', // 要查询的表\n    select: ['a', 'b'], //要返回的字段，不传默认返回所有 【可选】\n    where: [{ //数组格式,可以组成多个条件,默认查询全表 【可选】\n        join: 'OR', //条件关系 AND, OR\n        op: '>', //关系符,如 =, >, <, <=, >=\n        key: 'aa',\n        val: 23\n    }],\n    sort: { //排序, key是要排序的字段,value是排序方式, 1顺序,-1逆序 【可选】\n        a: 1,\n        b: -1\n    },\n    limit: { // 查询范围,可用于分页 【可选】\n        start: 0,\n        size: 10\n    },\n    slave: false // 是否从库 【可选】\n})\n\n// 其中，table这一项，还可以联表，但是仅限于 'left join'，要使用其他的方式联表，请自行编写sql语句\n// where条件也可以直接使用sql语句，要注意防止注入。\n\nconn.find({\n    table: {\n        master: 'xx',\n        unite: [\n            {\n                table: 'aa',\n                on: 'xx.id = aa.xid'\n            },\n            //... 可以联多个表， 但都是 left join\n        ]\n    },\n    where: `xx.id = 123`\n})\n\n```\n\n\n\n### 6. findOne(conf)\n- conf `<Object>`\n\n> 该方法与上面的`find`方法的使用一致，区别只是该方法只返回一条数据，且为`json格式`。\n\n\n### 7. count(conf)\n- conf `<Object>`\n\n> 该方法与上面的`find`方法的使用一致，不过返回的是条目总数(`<Number>`)\n\n\n### 8. insert(conf)\n- conf `<Object>`\n\n> 该方法与上面的`find`方法的使用类似，手于插入一条数据，具体请看下面代码;\n> \n> **注：**`该方法一次只能插入一条数据`\n\n```javascript\n\n// 如果主键是自增ID，则结果返回的是 刚插入的数据的自增ID\nconn.insert({\n    table: 'xx',\n    data: {}, //要插入的数据\n})\n\n```\n\n\n### 9. update(conf)\n- conf `<Object>`\n\n> 该方法与上面的`find`方法的使用类似，用于更新数据，具体请看下面代码;\n> `该方法返回的是被修改的条目数量`\n\n```javascript\n\n// 如果修改成功，则返回被修改的数量\nconn.update({\n    table: 'xx',\n    data: {}, //要修改的数据\n    where: `id = 123`\n})\n\n```\n\n\n### 10. remove(conf)\n- conf `<Object>`\n\n> 该方法与上面的`find`方法的使用类似，用于删除指定条件的数据; 具体请看下面代码;\n> `该方法返回的是被删除的条目数量`\n\n```javascript\n\n// 如果修改成功，返回的是被删除的条目数量\nconn.update({\n    table: 'xx',\n    data: {}, //要修改的数据\n    where: `id = 123`\n})\n\n```\n\n\n\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yutent/mysqli.git"
  },
  "scripts": {},
  "version": "2.0.1"
}
